import csv
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import requests
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from bokeh.plotting import figure, output_file, show
from bokeh.models import HoverTool, CategoricalColorMapper
from bokeh.layouts import column
from bokeh.models.widgets import Div

# Storing my Spotify API credentials - delete before commit!
CLIENT_ID = ''
CLIENT_SECRET = ''

# Authenticate with Spotify
client_credentials_manager = SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

# Defining CSV and field names
csv_file = 'ABGT_tracks.csv'
field_names = ['Artist Name', 'Artist URI', 'Track Name', 'Track URI', 'Album',
               'Key', 'Mode', 'Danceability', 'Energy', 'Loudness', 'Speechiness',
               'Acousticness', 'Instrumentalness', 'Liveness', 'Valence', 'Tempo', 'Embed Code']

# Writing to the csv
with open(csv_file, 'w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=field_names)
    writer.writeheader()

def episode_lookup():
    # Prompt the user for the album name
    user_album_title = input("Enter the ABGT episode number you want to analyze: ")

    # Construct the query string to search for the album by "Above & Beyond" with the specified title
    query = f'album:"{"Group Therapy " + user_album_title}" artist:"Above & Beyond"'

    # Search for the album using Spotify API
    results = sp.search(q=query, type='album', limit=1)

    # Check if the 'album' key exists in the 'results' dictionary
    if 'albums' in results and 'items' in results['albums'] and results['albums']['items']:
        album = results['albums']['items'][0]
        album_uri = album['uri']
        get_album_tracks(album_uri, album)
    else:
        print("Episode not found.")

def get_album_tracks(album_uri, album):
    # Retrieve tracks from the album using the album URI
    album_tracks = sp.album_tracks(album_uri)

    with open(csv_file, 'a', newline='', encoding="utf-8") as file:
        writer = csv.DictWriter(file, fieldnames=field_names)

        for track in album_tracks['items']:
            track_uri = track['uri'][14:]  # Dropping the first 15 characters (spotify:tracks:) from the output
            track_info = sp.track(track_uri)  # Getting information for each track, such as Album Name
            audio_features = sp.audio_features(track_uri)  # Getting audio features

            # Perform Spotify oEmbed lookup
            oembed_api_url = (
                f'https://open.spotify.com/oembed?url=https://open.spotify.com/track/{track_uri}&format=json')
            response = requests.get(oembed_api_url)

            if response.status_code == 200:
                oembed_data = response.json()
                embedded_html = oembed_data['html']  # Taking just the HTML portion of the response.json()
            else:
                embedded_html = ''

            # Retrieve the first artist's information for each track
            artists = track_info['artists']
            artist_names = [artist['name'] for artist in artists]
            artist_uris = [artist['uri'][15:] for artist in artists]

            combined_artist_names = ', '.join(artist_names)
            combined_artist_uris = ' / '.join(artist_uris)

            if 'group therapy' not in track['name'].lower():
                writer.writerow({
                'Artist Name': combined_artist_names,
                'Artist URI': combined_artist_uris,
                'Track Name': track['name'],
                'Track URI': track_uri,
                'Album': track_info['album']['name'],
                'Key': audio_features[0]['key'],
                'Mode': audio_features[0]['mode'],
                'Danceability': audio_features[0]['danceability'],
                'Energy': audio_features[0]['energy'],
                'Loudness': audio_features[0]['loudness'],
                'Speechiness': audio_features[0]['speechiness'],
                'Acousticness': audio_features[0]['acousticness'],
                'Instrumentalness': audio_features[0]['instrumentalness'],
                'Liveness': audio_features[0]['liveness'],
                'Valence': audio_features[0]['valence'],
                'Tempo': audio_features[0]['tempo'],
                'Embed Code': embedded_html
            })

episode_lookup()

# Reading CSV made from artist_explorer.py
df = pd.read_csv('ABGT_tracks.csv', encoding='utf-8')

# Select the columns from the 8th field onwards - just the floats and tempo, no strings
data_columns = df.columns[7:-1]  # Exclude the last column "Embed Code"

# Normalizing with Min-Max scaling - this will take tempo and convert it into a 0-1 value
scaler = MinMaxScaler()
df[data_columns] = scaler.fit_transform(df[data_columns])

# Calculate the variances for each field
variances = df[data_columns].var()

# Sort the fields based on their variances in descending order
sorted_variances = variances.sort_values(ascending=False)
print("All of the variances:")
print(sorted_variances)

# Select the top two fields with the highest variances
top_two_fields = sorted_variances.head(2)
field1 = top_two_fields.index[0]  # Get the field name of the first field
field2 = top_two_fields.index[1]  # Get the field name of the second field

print(f"The two fields with the greatest variance are {field1} and {field2}.\n")

# Ask the user if they want to use the fields with the greatest variance or define their own fields
user_choice = input("Would you like select your own categories to analyze? (y/n): ")

if user_choice.lower() == 'y':
    field1 = input("Enter Field 1: ") # Would be nice to incorporate some input filtering/control here
    field2 = input("Enter Field 2: ")

# Print the names of the selected fields
print("\nThe two selected fields are:")
print(field1)
print(field2)

# Create the scatterplot with black points (no color mapping)
scatterplot = figure()
scatterplot.circle(
    x=field1,
    y=field2,
    source=df,
    fill_color='black',  # Set to black
    line_color='black',  # Set the outline color to black
    size=6,
)

# Customize hover tooltips
hover = HoverTool(tooltips=[("Artist", "@{Artist Name}"), ("Track", "@{Track Name}")])
scatterplot.add_tools(hover)

# Set plot attributes
scatterplot.xaxis.axis_label = field1
scatterplot.yaxis.axis_label = field2

# Get the HTML data from the last field for each record
html_data = df.iloc[:, -1]

# Create a Div element to display the HTML data     
html_content = Div(text='', width=800, height=200)

# Concatenate all the HTML data and update the Div element
html_content.text = '\n\n'.join(html_data)

# Create a layout with the scatterplot and the Div element
layout = column(scatterplot, html_content)

# Save the plot as an HTML file and show it
output_file("scatterplot.html")
show(layout)
